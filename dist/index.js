"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.track = void 0;
async function track(opts) {
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // For timetravel testing purposes you may pass a timestamp in now. If not, we'll act against the current timestamp
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    let now /**/ = opts.now ?? new Date();
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // We must act if the actionDate is set and has passed.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    const actionDateChanged /**/ = `${opts.newDate}` !== `${opts.oldDate}`;
    const mustAct /**/ = (opts.newDate !== null) && (opts.newDate <= now);
    const mustNotAct /**/ = !mustAct;
    const haveActed /**/ = opts.oldDone === true;
    const haveNotActed /**/ = opts.oldDone !== true;
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Inform the caller if the date changed.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (actionDateChanged) {
        await opts.onSaveDate?.(opts.newDate);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Announcement
    // If we need to act but we haven't yet, we'll do it. Since we have not acted before we call this an announce.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (mustAct && haveNotActed) {
        await opts.onAnnounce?.();
        await opts.onSaveDone(true);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Move
    // If we need to act and we already have, we will normally do nothing. Exept when the date changed.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    else if (mustAct && haveActed && actionDateChanged) {
        await opts.onMove?.();
        await opts.onSaveDone(true);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Cancel
    // If we should (possibly no longer) act but we already did, we need to cancel.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    else if (mustNotAct && haveActed) {
        await opts.onCancel?.();
        await opts.onSaveDone(false);
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Default done to false
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    else if (mustNotAct && haveNotActed && opts.oldDone === null) {
        await opts.onSaveDone(false);
    }
}
exports.track = track;
//# sourceMappingURL=index.js.map